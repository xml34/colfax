Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.2.174 Build 20170213

Compiler options: -I/opt/intel/compilers_and_libraries_2017.2.174/linux/mpi/intel64/include -c -qopenmp -qopt-report=5 -xMIC-AVX512 -c -o image.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: ImageClass<float>::ImageClass(ImageClass<float> *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ImageClass<float>::ImageClass(ImageClass<float> *, int, int)) [1/14=7.1%] image.cc(5,36)
  -> EXTERN: (9,3) hbw_posix_memalign(void **, size_t, size_t)


    Report from: OpenMP optimizations [openmp]

image.cc(10:1-10:1):OMP:_ZN10ImageClassIfEC1Eii:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at image.cc(11,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at image.cc(12,5)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at image.cc(12,5)
         remark #15389: vectorization support: reference this->pixel[i*this->width+j] has unaligned access   [ image.cc(13,7) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.310 
         remark #15478: estimated potential speedup: 5.330 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at image.cc(12,5)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference this->pixel[i*this->width+j] has unaligned access   [ image.cc(13,7) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 1.364
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #25015: Estimate of max trip count of loop=1
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

image.cc(13,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
image.cc(13,7):remark #34026: call to memset implemented as a call to optimized library version
image.cc(5,36):remark #34051: REGISTER ALLOCATION : [_ZN10ImageClassIfEC1Eii] image.cc:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4 k1]
        
    Routine temporaries
        Total         :     130
            Global    :      37
            Local     :      93
        Regenerable   :      40
        Spilled       :       8
        
    Routine stack
        Variables     :      28 bytes*
            Reads     :       4 [0.00e+00 ~ 0.0%]
            Writes    :       6 [2.20e+01 ~ 3.2%]
        Spills        :     104 bytes*
            Reads     :      22 [2.59e+01 ~ 3.7%]
            Writes    :      20 [2.54e+01 ~ 3.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ImageClass<float>::ImageClass(ImageClass<float> *const, const int, const int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ImageClass<float>::ImageClass(ImageClass<float> *const, const int, const int)) [2/14=14.3%] image.cc(4,16)
  -> INLINE (MANUAL): (4,16) ImageClass<float>::ImageClass(ImageClass<float> *, int, int) (isz = 54) (sz = 63)
    -> EXTERN: (9,3) hbw_posix_memalign(void **, size_t, size_t)


    Report from: OpenMP optimizations [openmp]

image.cc(10:1-10:1):OMP:_ZN10ImageClassIfEC2Eii:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at image.cc(11,3) inlined into image.cc(4,16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at image.cc(12,5) inlined into image.cc(4,16)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at image.cc(12,5) inlined into image.cc(4,16)
         remark #15389: vectorization support: reference U0_V->pixel[i*U0_V->width+j] has unaligned access   [ image.cc(13,7) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.310 
         remark #15478: estimated potential speedup: 5.330 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at image.cc(12,5) inlined into image.cc(4,16)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference U0_V->pixel[i*U0_V->width+j] has unaligned access   [ image.cc(13,7) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 1.364
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #25015: Estimate of max trip count of loop=1
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

image.cc(13,7):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
image.cc(13,7):remark #34026: call to memset implemented as a call to optimized library version
image.cc(4,16):remark #34051: REGISTER ALLOCATION : [_ZN10ImageClassIfEC2Eii] image.cc:4

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4 k1]
        
    Routine temporaries
        Total         :     129
            Global    :      37
            Local     :      92
        Regenerable   :      40
        Spilled       :       7
        
    Routine stack
        Variables     :      28 bytes*
            Reads     :       4 [0.00e+00 ~ 0.0%]
            Writes    :       6 [2.20e+01 ~ 3.2%]
        Spills        :      96 bytes*
            Reads     :      19 [2.09e+01 ~ 3.1%]
            Writes    :      17 [2.45e+01 ~ 3.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ImageClass<float>::ImageClass(ImageClass<float> *const, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ImageClass<float>::ImageClass(ImageClass<float> *const, const char *)) [3/14=21.4%] image.cc(18,16)
  -> (18,16) ImageClass<float>::ImageClass(ImageClass<float> *, const char *) (isz = 255) (sz = 262)
     [[ Unable to inline callsite  <1>]]


    Report from: Code generation optimizations [cg]

image.cc(18,16):remark #34051: REGISTER ALLOCATION : [_ZN10ImageClassIfEC2EPKc] image.cc:18

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rsi rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       0
            Local     :      12
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ImageClass<float>::ImageClass(ImageClass<float> *, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ImageClass<float>::ImageClass(ImageClass<float> *, const char *)) [4/14=28.6%] image.cc(18,51)
  -> EXTERN: (23,14) fopen(const char *, const char *)
  -> EXTERN: (25,5) printf(const char *, ...)
  -> EXTERN: (26,5) exit(int)
  -> EXTERN: (31,3) fread(void *, size_t, size_t, FILE *)
  -> EXTERN: (32,7) png_sig_cmp(png_const_bytep, png_size_t, png_size_t)
  -> EXTERN: (33,5) printf(const char *, ...)
  -> EXTERN: (34,5) fclose(FILE *)
  -> EXTERN: (35,5) exit(int)
  -> EXTERN: (39,21) png_create_read_struct(png_const_charp, png_voidp, png_error_ptr, png_error_ptr)
  -> EXTERN: (40,20) png_create_info_struct(png_structp)
  -> EXTERN: (41,3) _setjmp(__jmp_buf_tag *)
  -> EXTERN: (41,3) png_set_longjmp_fn(png_structp, png_longjmp_ptr, size_t)
  -> EXTERN: (42,3) png_init_io(png_structp, png_FILE_p)
  -> EXTERN: (43,3) png_set_sig_bytes(png_structp, int)
  -> EXTERN: (44,3) png_read_info(png_structp, png_infop)
  -> EXTERN: (46,25) png_get_color_type(png_const_structp, png_const_infop)
  -> EXTERN: (47,24) png_get_bit_depth(png_const_structp, png_const_infop)
  -> EXTERN: (49,11) png_get_image_width(png_const_structp, png_const_infop)
  -> EXTERN: (52,12) png_get_image_height(png_const_structp, png_const_infop)
  -> EXTERN: (54,26) png_set_interlace_handling(png_structp)
  -> EXTERN: (55,3) png_read_update_info(png_structp, png_infop)
  -> EXTERN: (58,3) _setjmp(__jmp_buf_tag *)
  -> EXTERN: (58,3) png_set_longjmp_fn(png_structp, png_longjmp_ptr, size_t)
  -> EXTERN: (59,33) malloc(size_t)
  -> EXTERN: (61,26) malloc(size_t)
  -> EXTERN: (61,33) png_get_rowbytes(png_const_structp, png_const_infop)
  -> EXTERN: (62,3) png_read_image(png_structp, png_bytepp)
  -> EXTERN: (64,6) png_get_rowbytes(png_const_structp, png_const_infop)
  -> EXTERN: (65,5) printf(const char *, ...)
  -> EXTERN: (68,3) fclose(FILE *)
  -> EXTERN: (71,3) hbw_posix_memalign(void **, size_t, size_t)
  -> EXTERN: (79,5) free(void *)
  -> EXTERN: (80,3) free(void *)


    Report from: OpenMP optimizations [openmp]

image.cc(73:1-73:1):OMP:_ZN10ImageClassIfEC1EPKc:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at image.cc(78,3)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ image.cc(79,5) ]
LOOP END

LOOP BEGIN at image.cc(74,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at image.cc(75,5)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference this->pixel[i*this->width+j] has unaligned access   [ image.cc(76,7) ]
      remark #15389: vectorization support: reference *(*(*row+(i+i-1)*8)+j-1) has unaligned access   [ image.cc(76,30) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.197
      remark #25015: Estimate of max trip count of loop=31
   LOOP END

   LOOP BEGIN at image.cc(75,5)
      remark #15389: vectorization support: reference this->pixel[i*this->width+j] has unaligned access   [ image.cc(76,7) ]
      remark #15389: vectorization support: reference *(*(*row+(i+i-1)*8)+j-1) has unaligned access   [ image.cc(76,30) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 32
      remark #15309: vectorization support: normalized vectorization overhead 1.444
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 0.280 
      remark #15478: estimated potential speedup: 22.310 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at image.cc(75,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference this->pixel[i*this->width+j] has unaligned access   [ image.cc(76,7) ]
      remark #15389: vectorization support: reference *(*(*row+(i+i-1)*8)+j+?-1) has unaligned access   [ image.cc(76,30) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.197
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at image.cc(60,3)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

    Report from: Code generation optimizations [cg]

image.cc(18,51):remark #34051: REGISTER ALLOCATION : [_ZN10ImageClassIfEC1EPKc] image.cc:18

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm4 zmm16]
        
    Routine temporaries
        Total         :     291
            Global    :      68
            Local     :     223
        Regenerable   :      73
        Spilled       :       4
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :      39 [2.53e+01 ~ 3.6%]
            Writes    :      11 [1.44e+01 ~ 2.0%]
        Spills        :      64 bytes*
            Reads     :      14 [1.21e+01 ~ 1.7%]
            Writes    :      12 [7.77e+00 ~ 1.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ImageClass<float>::~ImageClass(ImageClass<float> *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ImageClass<float>::~ImageClass(ImageClass<float> *)) [5/14=35.7%] image.cc(84,30)
  -> EXTERN: (86,3) hbw_free(void *)


    Report from: Code generation optimizations [cg]

image.cc(84,30):remark #34051: REGISTER ALLOCATION : [_ZN10ImageClassIfED1Ev] image.cc:84

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       0
            Local     :      10
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ImageClass<float>::~ImageClass(ImageClass<float> *const)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ImageClass<float>::~ImageClass(ImageClass<float> *const)) [6/14=42.9%] image.cc(84,16)
  -> INLINE (MANUAL): (84,16) ImageClass<float>::~ImageClass(ImageClass<float> *) (isz = 1) (sz = 6)
    -> EXTERN: (86,3) hbw_free(void *)


    Report from: Code generation optimizations [cg]

image.cc(84,16):remark #34051: REGISTER ALLOCATION : [_ZN10ImageClassIfED2Ev] image.cc:84

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       0
            Local     :      10
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ImageClass<float>::WriteToFile(ImageClass<float> *, char *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ImageClass<float>::WriteToFile(ImageClass<float> *, char *, int, int)) [7/14=50.0%] image.cc(92,87)
  -> EXTERN: (96,3) strcpy(char *, const char *)
  -> EXTERN: (97,3) sprintf(char *, const char *, ...)
  -> EXTERN: (98,14) fopen(const char *, const char *)
  -> EXTERN: (100,5) printf(const char *, ...)
  -> EXTERN: (101,5) exit(int)
  -> EXTERN: (105,21) png_create_write_struct(png_const_charp, png_voidp, png_error_ptr, png_error_ptr)
  -> EXTERN: (106,20) png_create_info_struct(png_structp)
  -> EXTERN: (107,3) _setjmp(__jmp_buf_tag *)
  -> EXTERN: (107,3) png_set_longjmp_fn(png_structp, png_longjmp_ptr, size_t)
  -> EXTERN: (109,3) png_init_io(png_structp, png_FILE_p)
  -> EXTERN: (112,3) png_set_IHDR(png_structp, png_infop, png_uint_32, png_uint_32, int, int, int, int, int)
  -> EXTERN: (113,3) png_write_info(png_structp, png_infop)
  -> EXTERN: (116,31) malloc(size_t)
  -> EXTERN: (124,5) png_write_row(png_structp, png_const_bytep)
  -> EXTERN: (128,3) png_write_end(png_structp, png_infop)
  -> EXTERN: (129,3) png_free_data(png_structp, png_infop, png_uint_32, int)
  -> EXTERN: (130,3) png_destroy_write_struct(png_structpp, png_infopp)
  -> EXTERN: (131,3) fclose(FILE *)
  -> EXTERN: (132,3) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at image.cc(118,5)
<Peeled loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference row[j] has unaligned access   [ image.cc(122,7) ]
   remark #15389: vectorization support: reference this->pixel[i*this->width+j] has unaligned access   [ image.cc(119,30) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 32
   remark #15309: vectorization support: normalized vectorization overhead 0.035
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at image.cc(118,5)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15389: vectorization support: reference row[j] has unaligned access   [ image.cc(122,7) ]
   remark #15389: vectorization support: reference this->pixel[i*this->width+j] has unaligned access   [ image.cc(119,30) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 32
   remark #15309: vectorization support: normalized vectorization overhead 1.444
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 17 
   remark #15477: vector cost: 0.280 
   remark #15478: estimated potential speedup: 42.140 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at image.cc(118,5)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference row[j] has unaligned access   [ image.cc(122,7) ]
   remark #15389: vectorization support: reference this->pixel[i*this->width+j] has unaligned access   [ image.cc(119,30) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 32
   remark #15309: vectorization support: normalized vectorization overhead 0.035
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at image.cc(118,5)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at image.cc(118,5)
<Remainder, Multiversioned v2>
LOOP END


Non-optimizable loops:


LOOP BEGIN at image.cc(117,3)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

image.cc(92,87):remark #34051: REGISTER ALLOCATION : [_ZN10ImageClassIfE11WriteToFileEPcii] image.cc:92

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   34[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm12 zmm16-zmm21 k1-k2]
        
    Routine temporaries
        Total         :     371
            Global    :     117
            Local     :     254
        Regenerable   :      38
        Spilled       :       0
        
    Routine stack
        Variables     :     132 bytes*
            Reads     :      16 [2.11e+01 ~ 0.9%]
            Writes    :       4 [3.76e+00 ~ 0.2%]
        Spills        :      32 bytes*
            Reads     :       4 [3.52e+00 ~ 0.2%]
            Writes    :       4 [4.00e+00 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ImageClass<png_byte>::ImageClass(ImageClass<png_byte> *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ImageClass<png_byte>::ImageClass(ImageClass<png_byte> *, int, int)) [8/14=57.1%] image.cc(5,36)
  -> EXTERN: (9,3) hbw_posix_memalign(void **, size_t, size_t)


    Report from: OpenMP optimizations [openmp]

image.cc(10:1-10:1):OMP:_ZN10ImageClassIhEC1Eii:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at image.cc(11,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ image.cc(12,5) ]

   LOOP BEGIN at image.cc(12,5)
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

image.cc(5,36):remark #34051: REGISTER ALLOCATION : [_ZN10ImageClassIhEC1Eii] image.cc:5

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8-r12]
        
    Routine temporaries
        Total         :      96
            Global    :      17
            Local     :      79
        Regenerable   :      37
        Spilled       :       0
        
    Routine stack
        Variables     :      28 bytes*
            Reads     :       4 [0.00e+00 ~ 0.0%]
            Writes    :       6 [2.20e+01 ~ 5.1%]
        Spills        :      48 bytes*
            Reads     :      12 [6.00e+00 ~ 1.4%]
            Writes    :      12 [1.20e+01 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ImageClass<png_byte>::ImageClass(ImageClass<png_byte> *const, const int, const int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ImageClass<png_byte>::ImageClass(ImageClass<png_byte> *const, const int, const int)) [9/14=64.3%] image.cc(4,16)
  -> INLINE (MANUAL): (4,16) ImageClass<png_byte>::ImageClass(ImageClass<png_byte> *, int, int) (isz = 53) (sz = 62)
    -> EXTERN: (9,3) hbw_posix_memalign(void **, size_t, size_t)


    Report from: OpenMP optimizations [openmp]

image.cc(10:1-10:1):OMP:_ZN10ImageClassIhEC2Eii:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]



Non-optimizable loops:


LOOP BEGIN at image.cc(11,3) inlined into image.cc(4,16)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ image.cc(12,5) ]

   LOOP BEGIN at image.cc(12,5) inlined into image.cc(4,16)
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

image.cc(4,16):remark #34051: REGISTER ALLOCATION : [_ZN10ImageClassIhEC2Eii] image.cc:4

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rbp rsi rdi r8-r12]
        
    Routine temporaries
        Total         :      96
            Global    :      17
            Local     :      79
        Regenerable   :      37
        Spilled       :       0
        
    Routine stack
        Variables     :      28 bytes*
            Reads     :       4 [0.00e+00 ~ 0.0%]
            Writes    :       6 [2.20e+01 ~ 5.1%]
        Spills        :      48 bytes*
            Reads     :      12 [6.00e+00 ~ 1.4%]
            Writes    :      12 [1.20e+01 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ImageClass<png_byte>::ImageClass(ImageClass<png_byte> *const, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ImageClass<png_byte>::ImageClass(ImageClass<png_byte> *const, const char *)) [10/14=71.4%] image.cc(18,16)
  -> (18,16) ImageClass<png_byte>::ImageClass(ImageClass<png_byte> *, const char *) (isz = 253) (sz = 260)
     [[ Unable to inline callsite  <1>]]


    Report from: Code generation optimizations [cg]

image.cc(18,16):remark #34051: REGISTER ALLOCATION : [_ZN10ImageClassIhEC2EPKc] image.cc:18

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rsi rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       0
            Local     :      12
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ImageClass<png_byte>::ImageClass(ImageClass<png_byte> *, const char *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ImageClass<png_byte>::ImageClass(ImageClass<png_byte> *, const char *)) [11/14=78.6%] image.cc(18,51)
  -> EXTERN: (23,14) fopen(const char *, const char *)
  -> EXTERN: (25,5) printf(const char *, ...)
  -> EXTERN: (26,5) exit(int)
  -> EXTERN: (31,3) fread(void *, size_t, size_t, FILE *)
  -> EXTERN: (32,7) png_sig_cmp(png_const_bytep, png_size_t, png_size_t)
  -> EXTERN: (33,5) printf(const char *, ...)
  -> EXTERN: (34,5) fclose(FILE *)
  -> EXTERN: (35,5) exit(int)
  -> EXTERN: (39,21) png_create_read_struct(png_const_charp, png_voidp, png_error_ptr, png_error_ptr)
  -> EXTERN: (40,20) png_create_info_struct(png_structp)
  -> EXTERN: (41,3) _setjmp(__jmp_buf_tag *)
  -> EXTERN: (41,3) png_set_longjmp_fn(png_structp, png_longjmp_ptr, size_t)
  -> EXTERN: (42,3) png_init_io(png_structp, png_FILE_p)
  -> EXTERN: (43,3) png_set_sig_bytes(png_structp, int)
  -> EXTERN: (44,3) png_read_info(png_structp, png_infop)
  -> EXTERN: (46,25) png_get_color_type(png_const_structp, png_const_infop)
  -> EXTERN: (47,24) png_get_bit_depth(png_const_structp, png_const_infop)
  -> EXTERN: (49,11) png_get_image_width(png_const_structp, png_const_infop)
  -> EXTERN: (52,12) png_get_image_height(png_const_structp, png_const_infop)
  -> EXTERN: (54,26) png_set_interlace_handling(png_structp)
  -> EXTERN: (55,3) png_read_update_info(png_structp, png_infop)
  -> EXTERN: (58,3) _setjmp(__jmp_buf_tag *)
  -> EXTERN: (58,3) png_set_longjmp_fn(png_structp, png_longjmp_ptr, size_t)
  -> EXTERN: (59,33) malloc(size_t)
  -> EXTERN: (61,26) malloc(size_t)
  -> EXTERN: (61,33) png_get_rowbytes(png_const_structp, png_const_infop)
  -> EXTERN: (62,3) png_read_image(png_structp, png_bytepp)
  -> EXTERN: (64,6) png_get_rowbytes(png_const_structp, png_const_infop)
  -> EXTERN: (65,5) printf(const char *, ...)
  -> EXTERN: (68,3) fclose(FILE *)
  -> EXTERN: (71,3) hbw_posix_memalign(void **, size_t, size_t)
  -> EXTERN: (79,5) free(void *)
  -> EXTERN: (80,3) free(void *)


    Report from: OpenMP optimizations [openmp]

image.cc(73:1-73:1):OMP:_ZN10ImageClassIhEC1EPKc:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at image.cc(78,3)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ image.cc(79,5) ]
LOOP END


Non-optimizable loops:


LOOP BEGIN at image.cc(60,3)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at image.cc(74,3)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ image.cc(75,5) ]

   LOOP BEGIN at image.cc(75,5)
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

image.cc(18,51):remark #34051: REGISTER ALLOCATION : [_ZN10ImageClassIhEC1EPKc] image.cc:18

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rsi rdi r8-r14]
        
    Routine temporaries
        Total         :     241
            Global    :      53
            Local     :     188
        Regenerable   :      73
        Spilled       :       0
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :      39 [2.53e+01 ~ 7.1%]
            Writes    :      11 [1.44e+01 ~ 4.0%]
        Spills        :      40 bytes*
            Reads     :      10 [2.48e+00 ~ 0.7%]
            Writes    :      10 [7.48e+00 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ImageClass<png_byte>::~ImageClass(ImageClass<png_byte> *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ImageClass<png_byte>::~ImageClass(ImageClass<png_byte> *)) [12/14=85.7%] image.cc(84,30)
  -> EXTERN: (86,3) hbw_free(void *)


    Report from: Code generation optimizations [cg]

image.cc(84,30):remark #34051: REGISTER ALLOCATION : [_ZN10ImageClassIhED1Ev] image.cc:84

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       0
            Local     :      10
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ImageClass<png_byte>::~ImageClass(ImageClass<png_byte> *const)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ImageClass<png_byte>::~ImageClass(ImageClass<png_byte> *const)) [13/14=92.9%] image.cc(84,16)
  -> INLINE (MANUAL): (84,16) ImageClass<png_byte>::~ImageClass(ImageClass<png_byte> *) (isz = 1) (sz = 6)
    -> EXTERN: (86,3) hbw_free(void *)


    Report from: Code generation optimizations [cg]

image.cc(84,16):remark #34051: REGISTER ALLOCATION : [_ZN10ImageClassIhED2Ev] image.cc:84

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      10
            Global    :       0
            Local     :      10
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ImageClass<png_byte>::WriteToFile(ImageClass<png_byte> *, char *, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ImageClass<png_byte>::WriteToFile(ImageClass<png_byte> *, char *, int, int)) [14/14=100.0%] image.cc(92,87)
  -> EXTERN: (96,3) strcpy(char *, const char *)
  -> EXTERN: (97,3) sprintf(char *, const char *, ...)
  -> EXTERN: (98,14) fopen(const char *, const char *)
  -> EXTERN: (100,5) printf(const char *, ...)
  -> EXTERN: (101,5) exit(int)
  -> EXTERN: (105,21) png_create_write_struct(png_const_charp, png_voidp, png_error_ptr, png_error_ptr)
  -> EXTERN: (106,20) png_create_info_struct(png_structp)
  -> EXTERN: (107,3) _setjmp(__jmp_buf_tag *)
  -> EXTERN: (107,3) png_set_longjmp_fn(png_structp, png_longjmp_ptr, size_t)
  -> EXTERN: (109,3) png_init_io(png_structp, png_FILE_p)
  -> EXTERN: (112,3) png_set_IHDR(png_structp, png_infop, png_uint_32, png_uint_32, int, int, int, int, int)
  -> EXTERN: (113,3) png_write_info(png_structp, png_infop)
  -> EXTERN: (116,31) malloc(size_t)
  -> EXTERN: (124,5) png_write_row(png_structp, png_const_bytep)
  -> EXTERN: (128,3) png_write_end(png_structp, png_infop)
  -> EXTERN: (129,3) png_free_data(png_structp, png_infop, png_uint_32, int)
  -> EXTERN: (130,3) png_destroy_write_struct(png_structpp, png_infopp)
  -> EXTERN: (131,3) fclose(FILE *)
  -> EXTERN: (132,3) free(void *)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at image.cc(118,5)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #15313: loop was not vectorized: unsupported data type   [ image.cc(122,7) ]
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at image.cc(118,5)
<Remainder, Multiversioned v1>
LOOP END

LOOP BEGIN at image.cc(118,5)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at image.cc(118,5)
<Remainder, Multiversioned v2>
LOOP END


Non-optimizable loops:


LOOP BEGIN at image.cc(117,3)
   remark #15543: loop was not vectorized: loop with function call not considered an optimization candidate.
LOOP END

    Report from: Code generation optimizations [cg]

image.cc(92,87):remark #34051: REGISTER ALLOCATION : [_ZN10ImageClassIhE11WriteToFileEPcii] image.cc:92

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     150
            Global    :      31
            Local     :     119
        Regenerable   :      33
        Spilled       :       0
        
    Routine stack
        Variables     :     132 bytes*
            Reads     :      16 [2.11e+01 ~ 5.3%]
            Writes    :       4 [3.76e+00 ~ 0.9%]
        Spills        :      40 bytes*
            Reads     :       5 [4.40e+00 ~ 1.1%]
            Writes    :       5 [5.00e+00 ~ 1.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> Inlining the function will lead to incorrect program behavior.

