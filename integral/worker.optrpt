Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.2.174 Build 20170213

Compiler options: -I/opt/intel/compilers_and_libraries_2017.2.174/linux/mpi/intel64/include -c -qopenmp -qopt-report=5 -xMIC-AVX512 -c -o worker.o

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: ComputeIntegral(int, double, double, int, int)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ComputeIntegral(int, double, double, int, int)) [1/1=100.0%] worker.cc(4,103)
  -> EXTERN: (17,26) BlackBoxFunction(double)
  -> EXTERN: (24,3) MPI_Allreduce(const void *, void *, int, MPI_Datatype, MPI_Op, MPI_Comm)


    Report from: OpenMP optimizations [openmp]

worker.cc(13:1-13:1):OMP:_Z15ComputeIntegraliddii:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at worker.cc(13,1)
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.025
   remark #15525: call to function 'BlackBoxFunction(double)' is serialized   [ worker.cc(17,26) ]
   remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 114 
   remark #15477: vector cost: 119.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15485: serialized function calls: 1
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #15489: --- begin vector function matching report ---
   remark #15490: Function call: BlackBoxFunction(double) with simdlen=4, actual parameter types: (vector)   [ worker.cc(17,26) ]
   remark #15545: SIMD annotation was not seen, consider adding 'declare simd' directives at function declaration 
   remark #15493: --- end vector function matching report ---
LOOP END

LOOP BEGIN at worker.cc(13,1)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.072
LOOP END

    Report from: Code generation optimizations [cg]

worker.cc(4,103):remark #34051: REGISTER ALLOCATION : [_Z15ComputeIntegraliddii] worker.cc:4

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   37[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm13 zmm16-zmm25]
        
    Routine temporaries
        Total         :     300
            Global    :      61
            Local     :     239
        Regenerable   :      74
        Spilled       :      21
        
    Routine stack
        Variables     :      68 bytes*
            Reads     :       9 [6.00e+00 ~ 0.9%]
            Writes    :      14 [3.30e+01 ~ 4.8%]
        Spills        :     360 bytes*
            Reads     :      48 [1.45e+02 ~ 21.0%]
            Writes    :      40 [9.01e+01 ~ 13.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
